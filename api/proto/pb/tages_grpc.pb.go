// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: tages.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagesClient is the client API for Tages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagesClient interface {
	GettingPicture(ctx context.Context, in *AddPictureRequest, opts ...grpc.CallOption) (*AddPictureResponse, error)
}

type tagesClient struct {
	cc grpc.ClientConnInterface
}

func NewTagesClient(cc grpc.ClientConnInterface) TagesClient {
	return &tagesClient{cc}
}

func (c *tagesClient) GettingPicture(ctx context.Context, in *AddPictureRequest, opts ...grpc.CallOption) (*AddPictureResponse, error) {
	out := new(AddPictureResponse)
	err := c.cc.Invoke(ctx, "/tages.Tages/GettingPicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagesServer is the server API for Tages service.
// All implementations must embed UnimplementedTagesServer
// for forward compatibility
type TagesServer interface {
	GettingPicture(context.Context, *AddPictureRequest) (*AddPictureResponse, error)
	mustEmbedUnimplementedTagesServer()
}

// UnimplementedTagesServer must be embedded to have forward compatible implementations.
type UnimplementedTagesServer struct {
}

func (UnimplementedTagesServer) GettingPicture(context.Context, *AddPictureRequest) (*AddPictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GettingPicture not implemented")
}
func (UnimplementedTagesServer) mustEmbedUnimplementedTagesServer() {}

// UnsafeTagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagesServer will
// result in compilation errors.
type UnsafeTagesServer interface {
	mustEmbedUnimplementedTagesServer()
}

func RegisterTagesServer(s grpc.ServiceRegistrar, srv TagesServer) {
	s.RegisterService(&Tages_ServiceDesc, srv)
}

func _Tages_GettingPicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagesServer).GettingPicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tages.Tages/GettingPicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagesServer).GettingPicture(ctx, req.(*AddPictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tages_ServiceDesc is the grpc.ServiceDesc for Tages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tages.Tages",
	HandlerType: (*TagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GettingPicture",
			Handler:    _Tages_GettingPicture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tages.proto",
}
